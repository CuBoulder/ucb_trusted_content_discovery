<?php

use Drupal\ucb_trusted_content_discovery\Service\TrustedContentSync;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;

/**
 * Implements hook_cron().
 */
function ucb_trusted_content_discovery_cron() {
  \Drupal::logger('ucb_trusted_content_discovery')->info('Running trusted content sync via cron');

  // Sanity check on service.
  try {
    $svc = \Drupal::service('ucb_trusted_content_discovery.sync_service');
    \Drupal::logger('ucb_trusted_content_discovery')->info('âœ… Successfully got sync service');

    $svc->run();
    \Drupal::logger('ucb_trusted_content_discovery')->info('âœ… Completed calling run()');
  }
  catch (\Exception $e) {
    \Drupal::logger('ucb_trusted_content_discovery')->error('ðŸ’¥ Error in cron: @msg', ['@msg' => $e->getMessage()]);
  }
}

/**
 * Implements hook_views_data_alter().
 */
function ucb_trusted_content_discovery_views_data_alter(array &$data) {
  // Trust Role.
  $data['ucb_trusted_content_reference']['trust_role']['filter']['id'] = 'in_operator';
  $data['ucb_trusted_content_reference']['trust_role']['filter']['label'] = t('Trust Role');
  $data['ucb_trusted_content_reference']['trust_role']['filter']['help'] = t('Filter by Trust Role.');
  $data['ucb_trusted_content_reference']['trust_role']['filter']['options callback'] = 'ucb_trusted_content_discovery_trust_role_options';

  // Trust Scope.
  $data['ucb_trusted_content_reference']['trust_scope']['filter']['id'] = 'in_operator';
  $data['ucb_trusted_content_reference']['trust_scope']['filter']['label'] = t('Trust Scope');
  $data['ucb_trusted_content_reference']['trust_scope']['filter']['help'] = t('Filter by Trust Scope.');
  $data['ucb_trusted_content_reference']['trust_scope']['filter']['options callback'] = 'ucb_trusted_content_discovery_trust_scope_options';

  // Timeliness.
  $data['ucb_trusted_content_reference']['timeliness']['filter']['id'] = 'in_operator';
  $data['ucb_trusted_content_reference']['timeliness']['filter']['label'] = t('Timeliness');
  $data['ucb_trusted_content_reference']['timeliness']['filter']['help'] = t('Filter by Timeliness.');
  $data['ucb_trusted_content_reference']['timeliness']['filter']['options callback'] = 'ucb_trusted_content_discovery_timeliness_options';

  // Audience.
  $data['ucb_trusted_content_reference']['audience']['filter']['id'] = 'in_operator';
  $data['ucb_trusted_content_reference']['audience']['filter']['label'] = t('Audience');
  $data['ucb_trusted_content_reference']['audience']['filter']['help'] = t('Filter by Audience.');
  $data['ucb_trusted_content_reference']['audience']['filter']['options callback'] = 'ucb_trusted_content_discovery_audience_options';

  // Type.
  $data['ucb_trusted_content_reference']['type']['filter']['id'] = 'in_operator';
  $data['ucb_trusted_content_reference']['type']['filter']['label'] = t('Type');
  $data['ucb_trusted_content_reference']['type']['filter']['help'] = t('Filter by Type.');
  $data['ucb_trusted_content_reference']['type']['filter']['options callback'] = 'ucb_trusted_content_discovery_type_options';


$data['ucb_trusted_content_reference__trust_topics']['trust_topics_target_id'] = [
    'title' => t('Trust Topics'),
    'help' => t('The taxonomy terms referenced by this field.'),
    'relationship' => [
      'title' => t('Trust Topics'),
      'label' => t('Trust Topics'),
      'help' => t('Join to taxonomy terms referenced in trust_topics.'),
      'base' => 'taxonomy_term_field_data',
      'base field' => 'tid',
      'relationship field' => 'trust_topics_target_id',
      'id' => 'standard',
    ],
  ];

    // Join telemetry table on UUID.
$data['ucb_trusted_content_reference']['telemetry'] = [
    'title' => t('Telemetry by Remote UUID'),
    'help' => t('Join telemetry table where reference_uuid matches remote_uuid.'),
    'relationship' => [
      'id' => 'standard',
      'base' => 'ucb_trusted_content_telemetry',
      'base field' => 'reference_uuid',
      'relationship field' => 'remote_uuid',
      'label' => t('Telemetry'),
    ],
  ];
}


/**
 * Options callback for trust_role.
 */
function ucb_trusted_content_discovery_trust_role_options() {
  return [
    'primary_source' => 'Primary Source',
    'secondary_source' => 'Secondary Source',
    'subject_matter_contributor' => 'Subject Matter Contributor/Expert',
    'unverified' => 'Unverified',
  ];
}

/**
 * Options callback for trust_scope.
 */
function ucb_trusted_content_discovery_trust_scope_options() {
  return [
    'department_level' => 'Department Level',
    'college_level' => 'College Level',
    'administrative_unit' => 'Administrative Unit',
    'campus_wide' => 'Campus-wide',
  ];
}

/**
 * Options callback for timeliness.
 */
function ucb_trusted_content_discovery_timeliness_options() {
  return [
    'evergreen' => 'Evergreen',
    'fall_semester' => 'Fall Semester',
    'spring_semester' => 'Spring Semester',
    'summer_semester' => 'Summer Semester',
    'winter_semester' => 'Winter Semester',
  ];
}

/**
 * Options callback for audience.
 */
function ucb_trusted_content_discovery_audience_options() {
  return [
    'students' => 'Students',
    'faculty' => 'Faculty',
    'staff' => 'Staff',
    'alumni' => 'Alumni',
  ];
}

/**
 * Options callback for type.
 */
function ucb_trusted_content_discovery_type_options() {
  return [
    '' => '- None -',
    'advising_session' => 'Advising session',
    'brown_bag' => 'Brown Bag',
    'colloquium_seminar' => 'Colloquium/Seminar',
    'commencement' => 'Commencement',
    'community_engagement' => 'Community Engagement',
    'competition' => 'Competition',
    'concert_show' => 'Concert/Show',
    'dates_deadlines' => 'Dates/Deadlines',
    'exhibit' => 'Exhibit',
    'featured_event' => 'Featured Event',
    'festival' => 'Festival',
    'film' => 'Film',
    'information_session' => 'Information Session',
    'lecture_presentation' => 'Lecture/Presentation',
    'live_streams' => 'Live streams',
    'meeting_conference' => 'Meeting/Conference',
    'outreach' => 'Outreach',
    'social' => 'Social',
    'sporting_event' => 'Sporting Event',
    'student_club' => 'Student Club',
    'tour' => 'Tour',
    'virtual' => 'Virtual',
    'workshop_training' => 'Workshop/Training',
  ];
}

function ucb_trusted_content_discovery_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if ($entity->getEntityTypeId() === 'ucb_trusted_content_reference' && $operation === 'view') {
    return AccessResult::allowed();
  }
  return AccessResult::neutral();
}
