<?php

use Drupal\ucb_trusted_content_discovery\Entity\TrustedContentReference;
use Symfony\Component\Yaml\Yaml;
use Drupal\ucb_trusted_content_discovery\Service\TrustedContentSync;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;

/**
 * Implements hook_cron().
 */
function ucb_trusted_content_discovery_cron() {
  \Drupal::logger('ucb_trusted_content_discovery')->info('Running trusted content sync via cron');

  // Sanity check on service.
  try {
    $svc = \Drupal::service('ucb_trusted_content_discovery.sync_service');
    \Drupal::logger('ucb_trusted_content_discovery')->info('âœ… Successfully got sync service');

    $svc->run();
    \Drupal::logger('ucb_trusted_content_discovery')->info('âœ… Completed calling run()');
  }
  catch (\Exception $e) {
    \Drupal::logger('ucb_trusted_content_discovery')->error('ðŸ’¥ Error in cron: @msg', ['@msg' => $e->getMessage()]);
  }
}


/**
 * Implements hook_install().
 */
function ucb_trusted_content_discovery_install() {
  \Drupal::logger('ucb_trusted_content_discovery')->notice('Running hook_install()');

  $entity_type_id = 'ucb_trusted_content_reference';
  $entity_type = \Drupal::entityTypeManager()->getDefinition($entity_type_id);
  $update_manager = \Drupal::entityDefinitionUpdateManager();

  // Install the entity type itself.
  \Drupal::entityDefinitionUpdateManager()->installEntityType($entity_type);

  // Install field storage definitions.
  foreach (TrustedContentReference::baseFieldDefinitions($entity_type) as $field_name => $definition) {
    if (!$update_manager->getFieldStorageDefinition($field_name, $entity_type_id)) {
      $update_manager->installFieldStorageDefinition($field_name, $definition);
    }
  }

  $view_path = DRUPAL_ROOT . '/modules/custom/ucb_trusted_content_discovery/config/install/views.view.ucb_trusted_discovery.yml';
  \Drupal::logger('ucb_trusted_content_discovery')->notice('Checking view path: ' . $view_path);

  if (file_exists($view_path)) {
    \Drupal::logger('ucb_trusted_content_discovery')->notice('YAML found, importing view...');
    $yaml = Yaml::parse(file_get_contents($view_path));

    // ðŸ§¹ Clean up if view already exists.
    $existing = \Drupal::entityTypeManager()->getStorage('view')->load('ucb_trusted_discovery');
    if ($existing) {
      $existing->delete();
    }

    // Create and save the View entity.
    $view = \Drupal::entityTypeManager()
      ->getStorage('view')
      ->create($yaml);
    $view->save();

    // Rebuild caches and routing.
    \Drupal::entityTypeManager()->clearCachedDefinitions();
    \Drupal::service('entity_type.bundle.info')->clearCachedBundles();
    \Drupal::service('router.builder')->rebuild();
  }
  else {
    \Drupal::logger('ucb_trusted_content_discovery')->error('YAML file not found at install path!');
  }
}

/**
 * Implements hook_views_data_alter().
 */
function ucb_trusted_content_discovery_views_data_alter(array &$data) {
  // Trust Role.
  $data['ucb_trusted_content_reference']['trust_role']['filter']['id'] = 'in_operator';
  $data['ucb_trusted_content_reference']['trust_role']['filter']['label'] = t('Trust Role');
  $data['ucb_trusted_content_reference']['trust_role']['filter']['help'] = t('Filter by Trust Role.');
  $data['ucb_trusted_content_reference']['trust_role']['filter']['options callback'] = 'ucb_trusted_content_discovery_trust_role_options';

  // Trust Scope.
  $data['ucb_trusted_content_reference']['trust_scope']['filter']['id'] = 'in_operator';
  $data['ucb_trusted_content_reference']['trust_scope']['filter']['label'] = t('Trust Scope');
  $data['ucb_trusted_content_reference']['trust_scope']['filter']['help'] = t('Filter by Trust Scope.');
  $data['ucb_trusted_content_reference']['trust_scope']['filter']['options callback'] = 'ucb_trusted_content_discovery_trust_scope_options';


$data['ucb_trusted_content_reference__trust_topics']['trust_topics_target_id'] = [
    'title' => t('Trust Topics'),
    'help' => t('The taxonomy terms referenced by this field.'),
    'relationship' => [
      'title' => t('Trust Topics'),
      'label' => t('Trust Topics'),
      'help' => t('Join to taxonomy terms referenced in trust_topics.'),
      'base' => 'taxonomy_term_field_data',
      'base field' => 'tid',
      'relationship field' => 'trust_topics_target_id',
      'id' => 'standard',
    ],
  ];

    // Join telemetry table on UUID.
$data['ucb_trusted_content_reference']['telemetry'] = [
    'title' => t('Telemetry by Remote UUID'),
    'help' => t('Join telemetry table where reference_uuid matches remote_uuid.'),
    'relationship' => [
      'id' => 'standard',
      'base' => 'ucb_trusted_content_telemetry',
      'base field' => 'reference_uuid',
      'relationship field' => 'remote_uuid',
      'label' => t('Telemetry'),
    ],
  ];
}


/**
 * Options callback for trust_role.
 */
function ucb_trusted_content_discovery_trust_role_options() {
  return [
    'primary_source' => 'Primary Source',
    'secondary_source' => 'Secondary Source',
    'subject_matter_contributor' => 'Subject Matter Contributor/Expert',
    'unverified' => 'Unverified',
  ];
}

/**
 * Options callback for trust_scope.
 */
function ucb_trusted_content_discovery_trust_scope_options() {
  return [
    'department_level' => 'Department Level',
    'college_level' => 'College Level',
    'administrative_unit' => 'Administrative Unit',
    'campus_wide' => 'Campus-wide',
  ];
}

function ucb_trusted_content_discovery_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if ($entity->getEntityTypeId() === 'ucb_trusted_content_reference' && $operation === 'view') {
    return AccessResult::allowed();
  }
  return AccessResult::neutral();
}
